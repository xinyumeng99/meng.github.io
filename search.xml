<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/24/hello-world/</url>
    <content><![CDATA[<h6 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h6>
<p>Welcome to <a href="https://xinyumeng99.github.io/" target="_blank" rel="noopener">Stupid bunny</a>! This is my very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2>
<h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>HelloWorld</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>理性</tag>
        <tag>进步</tag>
        <tag>love</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github+Hexo搭建个人博客|No.1</title>
    <url>/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/</url>
    <content><![CDATA[<p>花了几天时间搭建了一个自己的hexo博客，先附上链接，大家看看效果，欢迎各位来访：<br>
<a href="https://stupidbunny.top">Stupid bunny-笨小兔</a></p>
<h3 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h3>
<p>现在市面上的博客很多，如CSDN，博客园，简书等等，可以在博客上发表一些文章，大家共同努力学习，这里呢，给大家展示使用Github和Hexo来搭建静态个人博客。</p>
<a id="more"></a>
<blockquote>
<p><strong>静态网页</strong>简单来说就是设计者把页面的东西设计好了，只是发布上去，本地浏览器就能访问。而<strong>动态网页</strong>的内容都是依靠服务器来运行的。管理者发布文章的时候只需要进入后台发布就行，发布后想更改也非常容易。需要主机来存放网站的源码等数据。</p>
</blockquote>
<blockquote>
<p>首先，搭建本地服务器的个人博客是免费的，你可以直接用GitHub的域名，不需要买域名，也不需要买主机而且非常稳定。搭建出一个个人博客会让自己倍儿有成就感，能力的提升当然也不在话下。</p>
</blockquote>
<p>一期教程是完不成的，后续会继续发布博客部署以及主题优化等…</p>
<p>下面我们开启由“小白”转向“博客大佬”的蜕变过程</p>
<h3 id="Hexo简介"><a class="header-anchor" href="#Hexo简介">¶</a>Hexo简介</h3>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<p>第一期教程分为两部分：</p>
<ul>
<li>第一部分：hexo搭建的准备工作</li>
<li>第二部分：hexo的初级搭建及基本配置</li>
</ul>
<hr>
<h3 id="第一部分"><a class="header-anchor" href="#第一部分">¶</a>第一部分</h3>
<h4 id="hexo搭建的准备工作："><a class="header-anchor" href="#hexo搭建的准备工作：">¶</a>hexo搭建的准备工作：</h4>
<ol>
<li>安装Git</li>
<li>安装Node.js</li>
</ol>
<h5 id="1-安装Git"><a class="header-anchor" href="#1-安装Git">¶</a>1.安装Git</h5>
<p>windows：到git官网<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>上下载,下载后单击右键会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>
<ul>
<li>
<p>选择自己对应的系统平台，我这里是用的Windows，点击下载，按照默认选项安装即可。</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/001.png" alt></p>
</li>
</ul>
<p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install git</span><br></pre></td></tr></table></figure>
<h5 id="2-安装Node-js"><a class="header-anchor" href="#2-安装Node-js">¶</a>2. 安装Node.js</h5>
<p>Hexo是基于node.js编写的，所以需要安装一下Node.js和里面的npm工具。</p>
<p>windows：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js</a>选择LTS版本就行了。</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/002.png" alt></p>
<p>Linux：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install nodejs</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install npm</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装完成后，打开命令窗口检测一下：<code>win+R</code></p>
</blockquote>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/003.png" alt></p>
<p>依次输入： (注意输入法在英文状态下)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line">git --<span class="keyword">version</span></span><br></pre></td></tr></table></figure>
<p>如果出现对应的版本号，那么表示本地环境搭建成功。</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/004.png" alt></p>
<blockquote>
<p>以上hexo的环境准备工作就完成了，下面的步骤中我们将使用git bash来敲命令行</p>
</blockquote>
<h3 id="第二部分"><a class="header-anchor" href="#第二部分">¶</a>第二部分</h3>
<h4 id="hexo的初级搭建及基本配置："><a class="header-anchor" href="#hexo的初级搭建及基本配置：">¶</a>hexo的初级搭建及基本配置：</h4>
<h5 id="1-GitHub注册"><a class="header-anchor" href="#1-GitHub注册">¶</a>1. GitHub注册</h5>
<ul>
<li>GitHub官网：<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，打开GitHub官网，点击注册。</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/005.png" alt></p>
<ul>
<li>注册自己的用户名，绑定邮箱等操作。</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/11.png" alt></p>
<ul>
<li>
<p>选择免费的账户</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/006.png" alt></p>
</li>
<li>
<p>下面是一个GitHub对新手的调查，可以直接跳过 <code>Skip this step</code></p>
</li>
<li>
<p>之后GitHub会向你的注册邮箱发送验证，打开你的邮箱进行验证，显示红框内容表示验证通过，先不用着急新建仓库。这一步就到这结束。</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/007.png" alt></p>
</li>
<li>
<p>下面在桌面或者其他空白处，单击鼠标右键，点击<code>Git Bash Here</code></p>
</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/008.png" alt></p>
<ul>
<li>
<p>依次输入：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"你的GitHub用户名"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"你的GitHub邮箱"</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/17.png" alt></p>
<p>可以用以下两条，检查一下你有没有输对：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name</span><br><span class="line">git<span class="built_in"> config </span>user.email</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>输入：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"你的GitHub邮箱"</span></span><br></pre></td></tr></table></figure>
<p>然后一路回车，创建SSH秘钥。这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p>
</li>
</ul>
<blockquote>
<p>ssh:简单来讲，就是一个秘钥。其中，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看；<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>
</blockquote>
<ul>
<li>进入下面路径，如果不显示的记得选择显示隐藏的项目。<br>
<code>路径： C: \用户\用户名\ .ssh</code></li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/009.png" alt></p>
<ul>
<li>
<p>用记事本打开<code>id_rsa.pub</code>文件，复制里面的内容。</p>
</li>
<li>
<p>登录<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，进入<code>setting</code>。</p>
</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/010.png" alt></p>
<ul>
<li>选择左边的<code>SSH and GPG Keys</code>选项，进行添加加密。</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/011.png" alt></p>
<ul>
<li>点击<code>New SSH Key</code>进行添加。</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/012.png" alt></p>
<ul>
<li>Title自己取名字，把刚才复制的秘钥粘贴到Key中，然后点击<code>Add SSH Key</code>添加完成。</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/013.png" alt></p>
<ul>
<li>打开Git Bash，输入：</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure>
<p>出现<code>Are you sure……</code>的时候输入yes回车。</p>
<p>最后显示<code>You've successfully……</code>的时候表示连接成功。</p>
<h5 id="2-创建GitHub-Pages仓库"><a class="header-anchor" href="#2-创建GitHub-Pages仓库">¶</a>2.创建GitHub Pages仓库</h5>
<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。可以把它理解为动态网站的主机。</p>
<ul>
<li>打开GitHub，点击右上角加号，然后点击<code>New repository</code>新建GitHub Pages仓库。</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/014.png" alt></p>
<ul>
<li>
<p>在Repository name中输入：<code>用户名.github.io</code></p>
<p><code>Description</code><strong>选填</strong>。</p>
<p><strong>勾选</strong><code>Initialize this repository with a README</code></p>
<p>填好后点击<code>Create repository</code>。创建后默认启用HTTPS。</p>
<p><strong>博客的地址为:</strong><code>https://用户名.github.io</code></p>
</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/015.png" alt></p>
<ul>
<li>这样GitHub仓库就创建完成了</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/016.png" alt></p>
<hr>
<h5 id="3-安装Hexo博客"><a class="header-anchor" href="#3-安装Hexo博客">¶</a>3.安装Hexo博客</h5>
<ul>
<li>
<p>首先在电脑磁盘<u><em>(自己选择想要存放博客程序，文件以及后续博客美化等文件的磁盘)</em></u>中新建一个文件夹，我这里命名<code>Blog-Hexo</code>，<strong>路径中最好不要存在中文</strong>。</p>
</li>
<li>
<p>新建后打开此文件，右键打开<code>Git Bash Here</code>进入git命令窗口 <em>(之前打开的可以关闭了)</em></p>
<p><strong>注意：一定要在<code>Blog-Hexo</code>文件夹中打开命令行</strong></p>
</li>
</ul>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/017.png" alt></p>
<ul>
<li>使用npm安装Hexo博客程序。输入：</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p>时间会有点长，耐心等待…</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/018.jpg" alt></p>
<ul>
<li>初始化和安装所需的组件。输入：</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo init</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/019.jpg" alt></p>
<ul>
<li>初始化完成后安装组件。接着输入：</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/020.jpg" alt></p>
<ul>
<li>这时候我们Blog-Hexo文件夹中就会生成一些目录文件：</li>
</ul>
<blockquote>
<p>node_modules：依赖包</p>
<p>public：存放生成的页面</p>
<p>scaffolds：生成文章的一些模板</p>
<p>source：用来存放你的文章和图片等等</p>
<p>themes：主题文件夹，后面美化博客时会用到</p>
<p><strong>_config.yml：博客的网站配置文件</strong>(太重要了！！！)</p>
</blockquote>
<ul>
<li>Hexo博客初始化就完成了，下面我们启用本地服务器进行本地预览。继续在命令行输入：</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> g    <span class="comment">#生成静态页面</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/021.jpg" alt></p>
<ul>
<li>继续输入：</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> s   <span class="comment">#启动预览</span></span><br></pre></td></tr></table></figure>
<p>一会命令行将会看到<code>http://localhost:4000</code>，现在就可以使用浏览器本地预览了，注意预览时<strong>不要</strong>按到<strong>Ctrl+C</strong>停止预览。</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/022.jpg" alt></p>
<p>打开浏览器，在地址栏中输入：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost:4000</span></span><br></pre></td></tr></table></figure>
<p>此时就可以看到创建的个人博客主题了，这是Hexo的默认界面</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/023.png" alt></p>
<p>那么，恭喜！本地博客安装成功了！</p>
<h5 id="4-上传部署Github"><a class="header-anchor" href="#4-上传部署Github">¶</a>4.上传部署Github</h5>
<p>前面我们只能通过4000端口进行预览，只能自己看到，别人是看不到的，所以我们做这一步的目的是：使其能够通过域名或者网站访问。</p>
<ul>
<li>需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</li>
</ul>
<p>首先<code>Ctrl+c</code>断开本地预览，接着输入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/024.jpg" alt></p>
<ul>
<li>在博客文件夹中打开网站配置文件_config.yml。（如果电脑上有写代码的编辑器就用编辑器打开，没有就用记事本打开。）</li>
</ul>
<p>找到文件末尾，在此处加上下面的代码：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line"><span class="attribute">type</span>: git</span><br><span class="line"><span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:用户名/用户名.github.io.git</span><br><span class="line"><span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<p>如图所示，记得保存退出！</p>
<p><img src="/2020/05/27/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-1/025.jpg" alt></p>
<ul>
<li>然后在命令行依次输入：</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>
<p>即<code>hexo generate</code>，生成静态文章</p>
<p>即<code>hexo deploy</code>，部署文章</p>
<p>注意deploy时可能要你输入username和password。</p>
<ul>
<li>上传成功后我们就可以使用网址进行访问了。网址为：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//你的用户名.github.io</span></span><br></pre></td></tr></table></figure>
<p>那么，到这里搭建及美化Hexo的第一期教程就结束咯。</p>
<p>希望可以帮助到大家，有不足之处望大家谅解，可以下方留言也可以左边菜单栏私信笨小兔QQ哦！！！</p>
<p>下一期教程主要是教大家怎么在个人博客上发布文章，请敬请期待吧~~~</p>
<p>喜欢的话记得支持笨小兔哦，可以关注下微信公众号！</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>搭建hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github-Hexo搭建个人博客|NO.2</title>
    <url>/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/</url>
    <content><![CDATA[<p>小伙伴们，后续更新来啦~~~</p>
<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<blockquote>
<p>通过第一期教程，大家应该都有了一个属于自己的hexo博客了。</p>
<p>下面第二期教程将带给大家如何写博客，如何搭配图文以及如何上传部署博客。</p>
<p>首先，准备工具—<a href="https://www.typora.io/#windows" target="_blank" rel="noopener">Markdown编辑器</a></p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="上传部署博客"><a class="header-anchor" href="#上传部署博客">¶</a>上传部署博客</h1>
<h4 id="Markdown-简介"><a class="header-anchor" href="#Markdown-简介">¶</a>Markdown 简介</h4>
<blockquote>
<p>Markdown 是一种可以使用普通文本编辑器编写的 <strong>标记语言</strong>，通过简单的 <strong>标记语法</strong>，它可以使普通文本内容具有一定的格式</p>
</blockquote>
<p>基于 Markdown 语法的简洁性，它已经成为目前世界上最流行的用于书写博客的语言</p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/640.gif" alt></p>
<hr>
<h2 id="教程"><a class="header-anchor" href="#教程">¶</a>教程</h2>
<h4 id="1、首先在博客文件夹里的根目录下打开Git。"><a class="header-anchor" href="#1、首先在博客文件夹里的根目录下打开Git。">¶</a>1、首先在博客文件夹里的根目录下打开Git。</h4>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/001.jpg" alt></p>
<hr>
<h4 id="2、-打开命令行进入source然后进入到-posts目录中"><a class="header-anchor" href="#2、-打开命令行进入source然后进入到-posts目录中">¶</a>2、 打开命令行进入source然后进入到_posts目录中</h4>
<blockquote>
<p>_posts文件夹主要就是用来存放博客的文章</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="built_in">source</span>/_posts/</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/002.jpg" alt></p>
<hr>
<h4 id="3、创建新博客文章命令："><a class="header-anchor" href="#3、创建新博客文章命令：">¶</a>3、创建新博客文章命令：</h4>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="string">"我的第一篇博客文章"</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/003.jpg" alt></p>
<p>可以看到在<code>_posts</code>文件夹中创建了.md格式的Markdown文件。</p>
<blockquote>
<p>但是，如果一篇博客文章中要插入很多的素材，例如图片，音频等等。这时就会出现素材存放很乱的问题，为了解决这一问题呢，Hexo也给出了较好的解决方案。</p>
</blockquote>
<p>打开博客配置文件<code>_config.yml</code></p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/004.jpg" alt></p>
<p>找到：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span><span class="symbol">post_asset_folder:</span> ture</span><br></pre></td></tr></table></figure>
<p>默认是false，改为true，<strong>注意冒号和true之间有一个空格！</strong></p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/005.jpg" alt></p>
<blockquote>
<p>设置好之后再新建.md文件，就会发现<code>_posts</code>文件夹中出现了同名的文件夹和.md文件。那么，以后每篇博客中的素材就可以放在相应的文件夹中了， 是不是很方便呢。</p>
</blockquote>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/006.jpg" alt></p>
<hr>
<h4 id="4、下载好的Markdown编辑器——Typora"><a class="header-anchor" href="#4、下载好的Markdown编辑器——Typora">¶</a>4、下载好的Markdown编辑器——Typora</h4>
<p>点击左上角文件，然后打开偏好设置，将图像中的<strong>优先使用相对路径</strong>勾选上</p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/007.jpg" alt></p>
<hr>
<h4 id="5、打开-md进行博文的书写。在插入图片的时候可以看到路径是相对路径"><a class="header-anchor" href="#5、打开-md进行博文的书写。在插入图片的时候可以看到路径是相对路径">¶</a>5、打开.md进行博文的书写。在插入图片的时候可以看到路径是相对路径</h4>
<p>​    <strong>同时，记得将图片等素材放入相应的文件夹里（养成好习惯）。</strong></p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/008.jpg" alt></p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/009.jpg" alt></p>
<hr>
<h4 id="6、-总结一下常用的命令："><a class="header-anchor" href="#6、-总结一下常用的命令：">¶</a>6、 总结一下常用的命令：</h4>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"name"</span>        #新建文章</span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">"name"</span>   #新建页面</span><br><span class="line">hexo g                 #生成页面</span><br><span class="line">hexo d                 #部署</span><br><span class="line">hexo g -d              #生成页面并部署</span><br><span class="line">hexo s                 #本地预览</span><br><span class="line">hexo clean             #清除缓存和已生成的静态文件</span><br></pre></td></tr></table></figure>
<p><strong>发布文章的时候可以用：</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> clean        <span class="comment">#清除缓存和已生成的静态文件</span></span><br><span class="line">hexo g            <span class="comment">#生成页面</span></span><br><span class="line">hexo s            <span class="comment">#本地预览</span></span><br><span class="line">hexo d            <span class="comment">#部署</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>hexo clean</code> 和 <code>hexo s </code>没必要每次都用，但是<code>hexo g</code> 和 <code>hexo d</code> 每次部署都要用到。</p>
<p>部署到博客界面可能很慢，多刷新或耐心等待下~</p>
</blockquote>
<hr>
<h2 id="问题解决"><a class="header-anchor" href="#问题解决">¶</a>问题解决</h2>
<p>可能有的小伙伴把文章部署上去会出现图片加载不出来的问题，下面提供一下解决方案：</p>
<p>需要加入一个插件，用Git输入命令：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ npm install https:<span class="regexp">//gi</span>thub.com<span class="regexp">/CodeFalling/</span>hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/010.png" alt></p>
<p>添加完这个插件后，其中的内容需要修改。</p>
<p>打开<code>/node_modules/hexo-asset-image/index.js</code>将内容更换为下面的代码</p>
<p><strong>提示：每次更改内容的时候最好先备份一份，以免修改错误回不去！</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> config = hexo.config;</span><br><span class="line"><span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">  <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">  link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">      ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">      xmlMode: <span class="literal">false</span>,</span><br><span class="line">      lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">      decodeEntities: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">  !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line"><span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line"><span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">$(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    data[key] = $.html();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/011.jpg" alt></p>
<p>更改后保存，然后重新清除缓存上传，这时在网页中就可以看到上传的图片了。</p>
<h2 id="博文格式"><a class="header-anchor" href="#博文格式">¶</a>博文格式</h2>
<h3 id="「笨小兔」—-有话要说"><a class="header-anchor" href="#「笨小兔」—-有话要说">¶</a>「笨小兔」— 有话要说</h3>
<h4 id="使用Markdown编写文章"><a class="header-anchor" href="#使用Markdown编写文章">¶</a>使用Markdown编写文章</h4>
<p>生成的文章上面会有固定的格式——标题、时间、tags标签等，并且生成的文章会通通显示出来，那么如果想让它在首页只显示前言一部分呢？</p>
<h5 id="1、隐藏文章主体部分"><a class="header-anchor" href="#1、隐藏文章主体部分">¶</a>1、隐藏文章主体部分</h5>
<p><code>&lt;!--- more ---&gt;</code>用来分割梗概与正文</p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/012.jpg" alt></p>
<p>效果如下：</p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/013.jpg" alt></p>
<p>因当时没有保存素材，所以这是用的主题美化后的效果，后期会和大家分享的，不要着急一步一步慢慢来~</p>
<h5 id="2、创建文章时固定的格式"><a class="header-anchor" href="#2、创建文章时固定的格式">¶</a>2、创建文章时固定的格式</h5>
<p>创建的文章路径是：<code>Blog-Hexo/source/_posts</code></p>
<p><code>categories</code>与<code>tags</code>分别是分类与标签</p>
<p>以tags为例语法是<code>tags: [tag1,tag2,tag3...tagn]</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span>  <span class="comment">#是否可评论</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[love,hexo,搭建hexo]</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>如果想将上述格式作为固定格式，也就是每当你创建一篇新的文章时，打开后上面呈现的就是这种固定格式，则可以做以下调整：</p>
<p>打开<code>post.md</code>文件</p>
<p>路径：<code>Blog-Hexo/scaffolds/post.md</code></p>
<p>将文件里的内容修改为上述格式，根据自己的需求选择，也可以和下面我的一样</p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/014.jpg" alt></p>
<p><img src="/2020/05/31/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-No-2/015.jpg" alt></p>
<p><strong>注意：属性和属性值之间必须有一个空格，否则会解析错误</strong></p>
<hr>
<blockquote>
<p>本期教程就到这里啦，这样Hexo的搭建及文章发布就完成了。<br>
后面的教程就是hexo的美化，用来提升B格哦,嘿嘿嘿~~~”</p>
</blockquote>
<hr>
<p>每天进步一点点，Peace</p>
<p>感谢支持！</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>搭建hexo</tag>
      </tags>
  </entry>
</search>
